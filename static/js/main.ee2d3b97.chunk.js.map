{"version":3,"sources":["components/Timer/index.jsx","components/Button/index.jsx","components/TaskList/index.jsx","utils/index.js","components/Overlay/index.jsx","app.jsx","serviceWorker.js","index.js"],"names":["timer","Button","_ref","className","props","Object","objectWithoutProperties","react_default","a","createElement","assign","concat","TaskList","components_Button","onClick","toggleTimer","timerOn","padTime","n","zeroes","maxdigits","repeat","slice","padWithLeadingZeros","formatTime","time","h","Math","floor","m","s","Overlay","open","children","Timer","active","setTime","_useState","useState","_useState2","slicedToArray","timerMode","setTimerMode","useEffect","setTimeout","clearInterval","components_Overlay","event","stopPropagation","overall","mode","formatTimeWithMode","App","setTimerOn","_useState3","_useState4","components_Timer","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee2d3b97.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { formatTimeWithMode } from '../../utils';\nimport './timer.css';\nimport Overlay from '../Overlay';\n\nlet timer;\n\nconst Timer = ({ active, onClick, setTime, time }) => {\n  const [timerMode, setTimerMode] = useState();\n  const toggleTimerMode = event => {\n    event.stopPropagation();\n    setTimerMode(!timerMode);\n  };\n\n  useEffect(() => {\n    if (active) timer = setTimeout(() => setTime(time + 1), 1000);\n    else clearInterval(timer);\n  }, [time, active, setTime]);\n\n  return (\n    <Overlay open={active} onClick={onClick}>\n      <div className=\"timer-container\" onClick={toggleTimerMode}>\n        {formatTimeWithMode(time, 900, timerMode)}\n      </div>\n    </Overlay>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport './button.css';\n\nconst Button = ({ className, ...props }) => (\n  <button className={`btn ${className || ''}`} {...props} />\n);\n\nexport default Button;\n","import React from 'react';\nimport Button from '../Button';\nimport './TaskList.css';\n\nconst TaskList = props => (\n  <div className=\"task-list-container\">\n    <div className=\"options\">\n      <Button className=\"btn-default\" onClick={props.toggleTimer}>\n        {props.timerOn ? '||' : '‚ñ∫'}\n      </Button>\n      <Button className=\"btn default\" onClick={props.toggleTimer}>\n        +üçÖ\n      </Button>\n      <Button className=\"btn default\" onClick={props.toggleTimer}>\n        Shuffle\n      </Button>\n      <Button className=\"btn default\" onClick={props.toggleTimer}>\n        Options\n      </Button>\n      <Button className=\"btn default\" onClick={props.toggleTimer}>\n        üíæ\n      </Button>\n    </div>\n    <div className=\"tasks-container\">Tasks here</div>\n  </div>\n);\n\nexport default TaskList;\n","export const padWithLeadingZeros = (n, zeroes, maxdigits) =>\n  ('0'.repeat(zeroes) + n).slice(-maxdigits);\n\nexport const padTime = n => padWithLeadingZeros(n, 2, 2);\n\nexport const formatTime = time =>\n  ((h, m, s) => `${padTime(h, 2, 2)}:${padTime(m, 2, 2)}:${padTime(s, 2, 2)}`)(\n    Math.floor(time / 3600),\n    Math.floor(time / 60) % 60,\n    time % 60\n  );\n\nexport const formatTimeWithMode = (time, overall, mode) =>\n  mode ? formatTime(time) : `-${formatTime(overall - time)}`;\n","import React from 'react';\nimport './overlay.css';\n\nconst Overlay = props => (\n  <div\n    onClick={props.onClick}\n    className={`overlay-container${props.open ? ' open' : ''}`}\n  >\n    {props.children}\n  </div>\n);\n\nexport default Overlay;\n","import React, { useState } from 'react';\nimport './app.css';\nimport { TaskList, Timer } from './components';\n\nfunction App() {\n  const [timerOn, setTimerOn] = useState();\n  const [time, setTime] = useState(0);\n  const toggleTimer = () => setTimerOn(!timerOn);\n\n  return (\n    <div className=\"app\">\n      <Timer\n        onClick={toggleTimer}\n        active={timerOn}\n        time={time}\n        setTime={setTime}\n      />\n      <TaskList timerOn={timerOn} toggleTimer={toggleTimer} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}