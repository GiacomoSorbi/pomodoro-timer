{"version":3,"sources":["components/Timer/index.jsx","components/Button/index.jsx","utils/index.js","components/Overlay/index.jsx","app.jsx","serviceWorker.js","index.js"],"names":["timer","Button","_ref","className","props","Object","objectWithoutProperties","react_default","a","createElement","assign","concat","padTime","n","zeroes","maxdigits","repeat","slice","padWithLeadingZeros","formatTime","time","h","Math","floor","m","s","Timer","overall","_useState","useState","_useState2","slicedToArray","timerMode","setTimerMode","useEffect","active","setTimeout","setTime","clearInterval","onClick","event","stopPropagation","Overlay","open","children","App","timerOn","setTimerOn","_useState3","_useState4","toggleTimer","components_Overlay","components_Timer","components_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAIIA,gECGWC,SAJA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAcC,EAAjBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,sBACbK,EAAAC,EAAAC,cAAA,SAAAJ,OAAAK,OAAA,CAAQP,UAAS,OAAAQ,OAASR,GAAa,KAAUC,MCDtCQ,EAAU,SAAAC,GAAC,OAHW,SAACA,EAAGC,EAAQC,GAAZ,OAChC,IAAIC,OAAOF,GAAUD,GAAGI,OAAOF,GAENG,CAAoBL,EAAG,EAAG,IAEzCM,EAAa,SAAAC,GAAI,OAC1BC,EACAC,KAAKC,MAAMH,EAAO,MADfI,EAEHF,KAAKC,MAAMH,EAAO,IAAM,GAFlBK,EAGNL,EAAO,GAHR,GAAAT,OAAgBC,EAAQS,GAAxB,KAAAV,OAAoCC,EAAQY,GAA5C,KAAAb,OAAwDC,EAAQa,IAAhE,IAACJ,EAAGG,EAAGC,GFoBKC,SApBD,SAAAtB,GAAS,IEMYgB,EAAMO,EFNlBC,EACaC,qBADbC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAuB,EAAA,GACdI,EADcF,EAAA,GACHG,EADGH,EAAA,GAarB,OANAI,oBAAU,WACJ9B,EAAM+B,OACRnC,EAAQoC,WAAW,kBAAMhC,EAAMiC,QAAQjC,EAAMgB,KAAO,IAAI,KACrDkB,cAActC,IAClB,CAACI,EAAMgB,KAAMhB,EAAM+B,SAGpB5B,EAAAC,EAAAC,cAAA,OAAKN,UAAU,kBAAkBoC,QAZX,SAAAC,GACtBA,EAAMC,kBACNR,GAAcD,MEEiBZ,EFSThB,EAAMgB,KETSO,EFSH,IAAKK,EERlCb,EAAWC,GAAd,IAAAT,OAA0BQ,EAAWQ,EAAUP,QCDtCsB,SATC,SAAAtC,GAAK,OACnBG,EAAAC,EAAAC,cAAA,OACE8B,QAASnC,EAAMmC,QACfpC,UAAS,oBAAAQ,OAAsBP,EAAMuC,KAAO,QAAU,KAErDvC,EAAMwC,YCcIC,MAjBf,WAAe,IAAAjB,EACiBC,qBADjBC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAuB,EAAA,GACNkB,EADMhB,EAAA,GACGiB,EADHjB,EAAA,GAAAkB,EAEWnB,mBAAS,GAFpBoB,EAAA5C,OAAA0B,EAAA,EAAA1B,CAAA2C,EAAA,GAEN5B,EAFM6B,EAAA,GAEAZ,EAFAY,EAAA,GAGPC,EAAc,kBAAMH,GAAYD,IAEtC,OACEvC,EAAAC,EAAAC,cAAA,OAAKN,UAAU,OACbI,EAAAC,EAAAC,cAAC0C,EAAD,CAASZ,QAASW,EAAaP,KAAMG,GACnCvC,EAAAC,EAAAC,cAAC2C,EAAD,CAAOjB,OAAQW,EAAS1B,KAAMA,EAAMiB,QAASA,KAE/C9B,EAAAC,EAAAC,cAAC4C,EAAD,CAAQlD,UAAU,cAAcoC,QAASW,GACtCJ,EAAU,OAAS,QADtB,YCHcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e1d18104.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { formatTimeWithMode } from '../../utils';\nimport './timer.css';\n\nlet timer;\n\nconst Timer = props => {\n  const [timerMode, setTimerMode] = useState();\n  const toggleTimerMode = event => {\n    event.stopPropagation();\n    setTimerMode(!timerMode);\n  };\n\n  useEffect(() => {\n    if (props.active)\n      timer = setTimeout(() => props.setTime(props.time + 1), 1000);\n    else clearInterval(timer);\n  }, [props.time, props.active]);\n\n  return (\n    <div className=\"timer-container\" onClick={toggleTimerMode}>\n      {formatTimeWithMode(props.time, 900, timerMode)}\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport './button.css';\n\nconst Button = ({ className, ...props }) => (\n  <button className={`btn ${className || ''}`} {...props} />\n);\n\nexport default Button;\n","export const padWithLeadingZeros = (n, zeroes, maxdigits) =>\n  ('0'.repeat(zeroes) + n).slice(-maxdigits);\n\nexport const padTime = n => padWithLeadingZeros(n, 2, 2);\n\nexport const formatTime = time =>\n  ((h, m, s) => `${padTime(h, 2, 2)}:${padTime(m, 2, 2)}:${padTime(s, 2, 2)}`)(\n    Math.floor(time / 3600),\n    Math.floor(time / 60) % 60,\n    time % 60\n  );\n\nexport const formatTimeWithMode = (time, overall, mode) =>\n  mode ? formatTime(time) : `-${formatTime(overall - time)}`;\n","import React from 'react';\nimport './overlay.css';\n\nconst Overlay = props => (\n  <div\n    onClick={props.onClick}\n    className={`overlay-container${props.open ? ' open' : ''}`}\n  >\n    {props.children}\n  </div>\n);\n\nexport default Overlay;\n","import React, { useState } from 'react';\nimport './app.css';\nimport { Button, Timer } from './components';\nimport Overlay from './components/Overlay';\n\nfunction App() {\n  const [timerOn, setTimerOn] = useState();\n  const [time, setTime] = useState(0);\n  const toggleTimer = () => setTimerOn(!timerOn);\n\n  return (\n    <div className=\"app\">\n      <Overlay onClick={toggleTimer} open={timerOn}>\n        <Timer active={timerOn} time={time} setTime={setTime} />\n      </Overlay>\n      <Button className=\"btn-default\" onClick={toggleTimer}>\n        {timerOn ? 'Stop' : 'Start'} Timer\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}